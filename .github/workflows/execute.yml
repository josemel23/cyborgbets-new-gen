name: Panel Scraper

on:
  workflow_dispatch:
    inputs:
      accion:
        description: 'Selecciona acción'
        required: true
        type: choice
        options:
          - scraper
          - deploy
        default: 'scraper'
      liga:
        description: 'Liga a procesar'
        required: false
        type: string
        default: 'liga_mx'

jobs:
  debug:
    runs-on: ubuntu-latest
    
    steps:
      - name: Info del sistema
        run: |
          echo "🟢 Workflow iniciado correctamente"
          echo "Acción: ${{ inputs.accion }}"
          echo "Liga: ${{ inputs.liga }}"
          echo "Rama: ${{ github.ref }}"
          echo "Rama esperada: principal"
          echo "Repositorio: ${{ github.repository }}"
          
      - name: Checkout código
        uses: actions/checkout@v4
        
      - name: Verificar archivos
        run: |
          echo "=== Estructura del proyecto ==="
          ls -la
          
          echo "=== Carpeta scraper ==="
          if [ -d "scraper" ]; then
            find scraper/ -type f -name "*.py" | head -10
          else
            echo "❌ Carpeta scraper no encontrada"
          fi
          
          echo "=== Archivo específico ==="
          SCRIPT_PATH="scraper/${{ inputs.liga }}/${{ inputs.liga }}_standings.py"
          if [ -f "$SCRIPT_PATH" ]; then
            echo "✅ Script encontrado: $SCRIPT_PATH"
            ls -la "$SCRIPT_PATH"
          else
            echo "❌ Script NO encontrado: $SCRIPT_PATH"
          fi

  scraper:
    runs-on: ubuntu-latest
    needs: debug
    if: inputs.accion == 'scraper'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 pandas lxml selenium webdriver-manager
          
          if [ -f requirements.txt ]; then
            echo "📦 Instalando requirements.txt"
            pip install -r requirements.txt
          fi
          
      - name: Ejecutar scraper
        run: |
          SCRIPT_PATH="scraper/${{ inputs.liga }}/${{ inputs.liga }}_standings.py"
          
          if [ -f "$SCRIPT_PATH" ]; then
            echo "🚀 Ejecutando scraper: $SCRIPT_PATH"
            
            # Ejecutar desde el directorio correcto
            cd "scraper/${{ inputs.liga }}"
            python "${{ inputs.liga }}_standings.py"
            
            echo "✅ Scraper ejecutado"
            
            # Verificar si se generaron archivos
            echo "=== Archivos generados ==="
            ls -la *.json 2>/dev/null || echo "No hay archivos JSON generados"
            ls -la *.csv 2>/dev/null || echo "No hay archivos CSV generados"
            
          else
            echo "❌ Error: Script no encontrado"
            find scraper/ -name "*.py" 2>/dev/null || echo "No hay archivos Python"
            exit 1
          fi
          
      - name: Verificar archivos generados
        run: |
          echo "=== Verificando archivos en todo el proyecto ==="
          find . -name "*.json" -newer .git/FETCH_HEAD 2>/dev/null || echo "No hay archivos JSON nuevos"
          find . -name "*.csv" -newer .git/FETCH_HEAD 2>/dev/null || echo "No hay archivos CSV nuevos"
          
          echo "=== Estado de git ==="
          git status
          
      - name: Commit y push archivos generados
        run: |
          # Configurar git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Agregar todos los archivos nuevos/modificados
          git add .
          
          # Verificar si hay cambios para commit
          if git diff --cached --quiet; then
            echo "📝 No hay archivos nuevos para commitear"
          else
            echo "📝 Commiteando archivos generados..."
            git commit -m "🤖 Auto-update: Scraper data for ${{ inputs.liga }} - $(date '+%Y-%m-%d %H:%M:%S')"
            
            echo "📤 Pushing cambios..."
            git push
            
            echo "✅ Archivos guardados en el repositorio"
          fi
