name: Panel Scraper

on:
  workflow_dispatch:
    inputs:
      accion:
        required: true
        type: choice
        options:
          - scraper
          - deploy
      liga:
        required: false
        type: string
        default: liga_mx

jobs:
  scraper:
    runs-on: ubuntu-latest
    if: inputs.accion == 'scraper'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Chrome and dependencies
        run: |
          echo "üîß Instalando Google Chrome y dependencias..."
          
          # Actualizar repositorios
          sudo apt-get update
          
          # Instalar dependencias del sistema
          sudo apt-get install -y \
            wget \
            curl \
            unzip \
            xvfb \
            libglib2.0-0 \
            libnss3-dev \
            libgconf-2-4 \
            libxss1 \
            libappindicator1 \
            fonts-liberation \
            libappindicator3-1 \
            libasound2-dev \
            libatk-bridge2.0-0 \
            libdrm2 \
            libxkbcommon0 \
            libxcomposite1 \
            libxdamage1 \
            libxrandr2 \
            libgbm1 \
            libgtk-3-0
          
          # Descargar e instalar Google Chrome
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
          # Verificar instalaci√≥n
          google-chrome --version
          which google-chrome
          
      - name: Setup virtual display
        run: |
          echo "üñ•Ô∏è Configurando display virtual..."
          
          # Iniciar Xvfb para display headless
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          
          # Esperar a que inicie
          sleep 3
          
          # Variables de entorno para Chrome
          echo "DISPLAY=:99" >> $GITHUB_ENV
          echo "CHROME_BIN=/usr/bin/google-chrome" >> $GITHUB_ENV
          
      - name: Install Python dependencies
        run: |
          echo "üì¶ Instalando dependencias de Python..."
          
          python -m pip install --upgrade pip
          
          # Dependencias espec√≠ficas para tu scraper
          pip install \
            undetected-chromedriver \
            selenium \
            requests \
            beautifulsoup4 \
            pandas \
            lxml \
            webdriver-manager
          
          # Si hay requirements.txt
          if [ -f requirements.txt ]; then
            echo "üìã Instalando requirements.txt..."
            pip install -r requirements.txt
          fi
          
          # Mostrar versiones
          echo "=== VERSIONES INSTALADAS ==="
          pip list | grep -E "(undetected|selenium|chrome)"
          
      - name: Test Chrome setup
        run: |
          echo "üß™ Probando configuraci√≥n de Chrome..."
          
          python3 -c "
import sys
import os
print('Python version:', sys.version)
print('DISPLAY:', os.environ.get('DISPLAY'))
print('CHROME_BIN:', os.environ.get('CHROME_BIN'))

try:
    import undetected_chromedriver as uc
    print('‚úÖ undetected_chromedriver importado correctamente')
    print('Versi√≥n UC:', uc.__version__)
    
    # Test b√°sico de Chrome
    options = uc.ChromeOptions()
    options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--disable-gpu')
    options.add_argument('--window-size=1920,1080')
    
    print('‚è≥ Iniciando Chrome...')
    driver = uc.Chrome(options=options)
    
    print('üåê Navegando a Google...')
    driver.get('https://www.google.com')
    
    print('üìÑ T√≠tulo:', driver.title)
    print('‚úÖ Chrome funcionando correctamente')
    
    driver.quit()
    print('‚úÖ Chrome cerrado correctamente')
    
except Exception as e:
    print(f'‚ùå Error: {e}')
    import traceback
    traceback.print_exc()
    sys.exit(1)
"
          
      - name: Run scraper with detailed logging
        run: |
          echo "üöÄ Ejecutando scraper..."
          
          SCRIPT_PATH="scraper/${{ inputs.liga }}/${{ inputs.liga }}_standings.py"
          
          if [ -f "$SCRIPT_PATH" ]; then
            echo "üìÅ Script encontrado: $SCRIPT_PATH"
            
            # Cambiar al directorio del script
            cd "scraper/${{ inputs.liga }}"
            echo "üìÇ Directorio: $(pwd)"
            echo "üìã Archivos disponibles:"
            ls -la
            
            echo "‚è∞ Inicio: $(date)"
            echo "üîÑ Ejecutando scraper..."
            
            # Ejecutar con timeout de 10 minutos
            timeout 600 python3 "${{ inputs.liga }}_standings.py" 2>&1 | tee scraper.log
            
            SCRIPT_EXIT_CODE=${PIPESTATUS[0]}
            echo "‚è∞ Fin: $(date)"
            echo "üî¢ C√≥digo de salida: $SCRIPT_EXIT_CODE"
            
            echo "=== LOGS DEL SCRAPER ==="
            cat scraper.log
            echo "========================"
            
            echo "=== ARCHIVOS GENERADOS ==="
            ls -la *.json *.csv 2>/dev/null || echo "No se generaron archivos"
            
            if [ $SCRIPT_EXIT_CODE -eq 124 ]; then
              echo "‚ö†Ô∏è Timeout - Script cancelado despu√©s de 10 minutos"
            elif [ $SCRIPT_EXIT_CODE -ne 0 ]; then
              echo "‚ùå Script fall√≥ con c√≥digo $SCRIPT_EXIT_CODE"
              exit 1
            else
              echo "‚úÖ Script ejecutado exitosamente"
            fi
            
          else
            echo "‚ùå Script no encontrado: $SCRIPT_PATH"
            find . -name "*.py" | head -10
            exit 1
          fi
          
      - name: Commit generated files
        run: |
          echo "üìù Guardando archivos generados..."
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Actions Bot"
          
          git add .
          
          if git diff --cached --quiet; then
            echo "‚ÑπÔ∏è No hay cambios para commitear"
          else
            echo "üì§ Commiteando cambios..."
            git status --porcelain
            
            git commit -m "ü§ñ Auto-scraper: ${{ inputs.liga }} data - $(date '+%Y-%m-%d %H:%M UTC')"
            git push
            
            echo "‚úÖ Archivos guardados en repositorio"
          fi
