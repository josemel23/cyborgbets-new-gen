name: Panel Scraper
on:
  workflow_dispatch:
    inputs:
      accion:
        required: true
        type: choice
        options:
          - scraper
          - deploy
      liga:
        required: false
        type: string
        default: liga_mx

jobs:
  scraper:
    runs-on: ubuntu-latest
    if: inputs.accion == 'scraper'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Chrome
        run: |
          sudo apt-get update
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
      - name: Setup Display
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          sleep 3
          echo "DISPLAY=:99" >> $GITHUB_ENV
      - name: Install Python deps
        run: |
          pip install undetected-chromedriver selenium pandas requests beautifulsoup4
      - name: Run scraper
        run: |
          cd "scraper/${{ inputs.liga }}"
          timeout 600 python3 "${{ inputs.liga }}_standings.py"
      - name: Move files to correct location
        run: |
          echo "📁 Moviendo archivos a la ubicación correcta..."
          mkdir -p public/static
          if [ -f "scraper/${{ inputs.liga }}/public/static/${{ inputs.liga }}_data.json" ]; then
            echo "✅ Moviendo ${{ inputs.liga }}_data.json"
            cp "scraper/${{ inputs.liga }}/public/static/${{ inputs.liga }}_data.json" "public/static/"
            echo "Archivo movido a: public/static/${{ inputs.liga }}_data.json"
          fi
          find "scraper/${{ inputs.liga }}/" -name "*.json" -exec echo "JSON encontrado: {}" \;
          find "scraper/${{ inputs.liga }}/" -name "*.json" -exec cp {} "public/static/" \;
          echo "=== Archivos en public/static/ ==="
          ls -la public/static/ || echo "Carpeta public/static/ vacía"
      - name: Commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "Auto-update: ${{ inputs.liga }}"
            git push
          fi

  deploy:
    runs-on: ubuntu-latest
    if: inputs.accion == 'deploy'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Firebase CLI
        run: |
          echo "🔥 Instalando Firebase CLI..."
          npm install -g firebase-tools
          firebase --version
          
      - name: Verify project structure
        run: |
          echo "🔍 Verificando estructura del proyecto..."
          ls -la
          
          echo "📁 Contenido de public/:"
          if [ -d "public" ]; then
            ls -la public/
            if [ -d "public/static" ]; then
              echo "📊 Archivos en public/static/:"
              ls -la public/static/
            fi
          else
            echo "❌ Carpeta public/ no encontrada"
          fi
          
          echo "🔧 Buscando firebase.json..."
          if [ -f "firebase.json" ]; then
            echo "✅ firebase.json encontrado"
            cat firebase.json
          else
            echo "❌ firebase.json no encontrado"
            echo "🛠️  Creando firebase.json básico..."
            cat > firebase.json << EOF
{
  "hosting": {
    "public": "public",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ]
  }
}
EOF
          fi
          
      - name: Build project (if needed)
        run: |
          echo "🔨 Preparando archivos para deploy..."
          
          # Si hay package.json, instalar dependencias
          if [ -f "package.json" ]; then
            echo "📦 Instalando dependencias..."
            npm install
            
            # Si hay script de build, ejecutarlo
            if npm run | grep -q "build"; then
              echo "🏗️  Ejecutando build..."
              npm run build
              
              # Si se crea dist/ o build/, copiar a public/
              if [ -d "dist" ]; then
                echo "📁 Copiando de dist/ a public/"
                cp -r dist/* public/
              elif [ -d "build" ]; then
                echo "📁 Copiando de build/ a public/"
                cp -r build/* public/
              fi
            fi
          fi
          
          echo "📋 Archivos finales en public/:"
          ls -la public/
          
      - name: Deploy to Firebase
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          echo "🚀 Desplegando a Firebase Hosting..."
          
          if [ -z "$FIREBASE_TOKEN" ]; then
            echo "❌ ERROR: FIREBASE_TOKEN no configurado"
            echo "🔧 Para configurar:"
            echo "1. Ejecuta: firebase login:ci"
            echo "2. Copia el token generado"
            echo "3. Ve a tu repo → Settings → Secrets → Actions"
            echo "4. Crea secret: FIREBASE_TOKEN = tu-token"
            exit 1
          fi
          
          echo "✅ Token de Firebase configurado"
          
          # Deploy usando el token
          firebase deploy --token "$FIREBASE_TOKEN" --non-interactive
          
          echo "🎉 Deploy completado!"
          echo "🌐 Tu app debería estar actualizada en Firebase Hosting"
          
      - name: Deploy summary
        run: |
          echo "✅ Deploy a Firebase completado"
          echo "🔄 Los cambios deberían ser visibles en tu enlace de Firebase"
          echo "📱 Refresca tu app desde el móvil para ver los cambios"
