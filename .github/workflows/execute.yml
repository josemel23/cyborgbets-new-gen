name: Panel Scraper
on:
  workflow_dispatch:
    inputs:
      accion:
        required: true
        type: choice
        options:
          - scraper
          - deploy
      liga:
        required: false
        type: string
        default: liga_mx

jobs:
  scraper:
    runs-on: ubuntu-latest
    if: inputs.accion == 'scraper'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Chrome
        run: |
          sudo apt-get update
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
      - name: Setup Display
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          sleep 3
          echo "DISPLAY=:99" >> $GITHUB_ENV
      - name: Install Python deps
        run: |
          pip install undetected-chromedriver selenium pandas requests beautifulsoup4
      - name: Run scraper
        run: |
          cd "scraper/${{ inputs.liga }}"
          timeout 600 python3 "${{ inputs.liga }}_standings.py"
      - name: Move files to correct location
        run: |
          echo "📁 Moviendo archivos a la ubicación correcta..."
          mkdir -p public/static
          if [ -f "scraper/${{ inputs.liga }}/public/static/${{ inputs.liga }}_data.json" ]; then
            echo "✅ Moviendo ${{ inputs.liga }}_data.json"
            cp "scraper/${{ inputs.liga }}/public/static/${{ inputs.liga }}_data.json" "public/static/"
            echo "Archivo movido a: public/static/${{ inputs.liga }}_data.json"
          fi
          find "scraper/${{ inputs.liga }}/" -name "*.json" -exec echo "JSON encontrado: {}" \;
          find "scraper/${{ inputs.liga }}/" -name "*.json" -exec cp {} "public/static/" \;
          echo "=== Archivos en public/static/ ==="
          ls -la public/static/ || echo "Carpeta public/static/ vacía"
      - name: Commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "Auto-update: ${{ inputs.liga }}"
            git push
          fi

  deploy:
    runs-on: ubuntu-latest
    if: inputs.accion == 'deploy'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Detect project type
        run: |
          echo "🔍 Detectando tipo de proyecto..."
          
          if [ -f "package.json" ]; then
            echo "📦 Proyecto Node.js/React detectado"
            echo "PROJECT_TYPE=nodejs" >> $GITHUB_ENV
            cat package.json | head -20
          elif [ -f "requirements.txt" ] && [ -f "app.py" ]; then
            echo "🐍 Proyecto Python/Flask detectado"
            echo "PROJECT_TYPE=flask" >> $GITHUB_ENV
          elif [ -f "requirements.txt" ] && [ -f "main.py" ]; then
            echo "🐍 Proyecto Python general detectado"
            echo "PROJECT_TYPE=python" >> $GITHUB_ENV
          elif [ -f "index.html" ]; then
            echo "🌐 Proyecto HTML estático detectado"
            echo "PROJECT_TYPE=static" >> $GITHUB_ENV
          else
            echo "❓ Tipo de proyecto no detectado"
            echo "Archivos en raíz:"
            ls -la
            echo "PROJECT_TYPE=unknown" >> $GITHUB_ENV
          fi
          
      - name: Setup Node.js (if needed)
        if: env.PROJECT_TYPE == 'nodejs'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup Python (if needed)
        if: env.PROJECT_TYPE == 'flask' || env.PROJECT_TYPE == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies and build
        run: |
          echo "🚀 Preparando deploy para: $PROJECT_TYPE"
          
          case $PROJECT_TYPE in
            nodejs)
              echo "📦 Instalando dependencias Node.js..."
              npm install
              echo "🔨 Building proyecto..."
              npm run build || echo "No build script encontrado"
              echo "📁 Archivos después del build:"
              ls -la dist/ build/ out/ 2>/dev/null || echo "No hay carpeta de build estándar"
              ;;
            flask)
              echo "🐍 Instalando dependencias Python..."
              pip install -r requirements.txt
              echo "✅ Flask app preparada"
              ;;
            python)
              echo "🐍 Instalando dependencias Python..."
              pip install -r requirements.txt
              echo "✅ Python app preparada"
              ;;
            static)
              echo "🌐 Proyecto estático - listo para deploy"
              ;;
            *)
              echo "❓ Tipo desconocido - listando archivos:"
              find . -maxdepth 2 -type f \( -name "*.html" -o -name "*.js" -o -name "*.py" \) | head -10
              ;;
          esac
          
      - name: Deploy status
        run: |
          echo "✅ Deploy preparado para: $PROJECT_TYPE"
          echo "📊 Estado del proyecto:"
          echo "- Tipo: $PROJECT_TYPE"
          echo "- Archivos principales:"
          ls -la | head -10
          echo ""
          echo "🚀 Para deploy real, configurar:"
          echo "- Vercel/Netlify para static/nodejs"
          echo "- Heroku/Railway para Python"
          echo "- O servidor personalizado"
          echo ""
          echo "✅ Deploy simulation completado"
