name: Panel Scraper
on:
  workflow_dispatch:
    inputs:
      accion:
        required: true
        type: choice
        options:
          - scraper
          - deploy
      liga:
        required: false
        type: string
        default: liga_mx

jobs:
  scraper:
    runs-on: ubuntu-latest
    if: inputs.accion == 'scraper'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Chrome
        run: |
          sudo apt-get update
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
      - name: Setup Display
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          sleep 3
          echo "DISPLAY=:99" >> $GITHUB_ENV
      - name: Install Python deps
        run: |
          pip install undetected-chromedriver selenium pandas requests beautifulsoup4
      - name: Run scraper
        run: |
          cd "scraper/${{ inputs.liga }}"
          timeout 600 python3 "${{ inputs.liga }}_standings.py"
      - name: Move files to correct location
        run: |
          echo "üìÅ Moviendo archivos a la ubicaci√≥n correcta..."
          mkdir -p public/static
          if [ -f "scraper/${{ inputs.liga }}/public/static/${{ inputs.liga }}_data.json" ]; then
            echo "‚úÖ Moviendo ${{ inputs.liga }}_data.json"
            cp "scraper/${{ inputs.liga }}/public/static/${{ inputs.liga }}_data.json" "public/static/"
            echo "Archivo movido a: public/static/${{ inputs.liga }}_data.json"
          fi
          find "scraper/${{ inputs.liga }}/" -name "*.json" -exec echo "JSON encontrado: {}" \;
          find "scraper/${{ inputs.liga }}/" -name "*.json" -exec cp {} "public/static/" \;
          echo "=== Archivos en public/static/ ==="
          ls -la public/static/ || echo "Carpeta public/static/ vac√≠a"
      - name: Commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "Auto-update: ${{ inputs.liga }}"
            git push
          fi

  deploy:
    runs-on: ubuntu-latest
    if: inputs.accion == 'deploy'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Detect project type and setup
        id: setup
        run: |
          echo "üîç Detectando tipo de proyecto..."
          
          if [ -f "package.json" ]; then
            echo "üì¶ Proyecto Node.js/React detectado"
            echo "project_type=nodejs" >> $GITHUB_OUTPUT
            echo "PROJECT_TYPE=nodejs" >> $GITHUB_ENV
          elif [ -f "requirements.txt" ] && [ -f "app.py" ]; then
            echo "üêç Proyecto Python/Flask detectado"
            echo "project_type=flask" >> $GITHUB_OUTPUT
            echo "PROJECT_TYPE=flask" >> $GITHUB_ENV
          elif [ -f "requirements.txt" ] && [ -f "main.py" ]; then
            echo "üêç Proyecto Python general detectado"
            echo "project_type=python" >> $GITHUB_OUTPUT
            echo "PROJECT_TYPE=python" >> $GITHUB_ENV
          elif [ -f "index.html" ]; then
            echo "üåê Proyecto HTML est√°tico detectado"
            echo "project_type=static" >> $GITHUB_OUTPUT
            echo "PROJECT_TYPE=static" >> $GITHUB_ENV
          else
            echo "‚ùì Tipo de proyecto no detectado, asumiendo est√°tico"
            echo "project_type=static" >> $GITHUB_OUTPUT
            echo "PROJECT_TYPE=static" >> $GITHUB_ENV
          fi

      # OPCI√ìN 1: Deploy a GitHub Pages (para proyectos est√°ticos)
      - name: Deploy to GitHub Pages
        if: steps.setup.outputs.project_type == 'static'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          force_orphan: true

      # OPCI√ìN 2: Deploy a Vercel (para Node.js/React/Static)
      - name: Setup Node.js for Vercel
        if: steps.setup.outputs.project_type == 'nodejs'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install and Build for Vercel
        if: steps.setup.outputs.project_type == 'nodejs'
        run: |
          npm install
          npm run build || echo "No build script, usando archivos actuales"
          
      - name: Deploy to Vercel
        if: steps.setup.outputs.project_type == 'nodejs' || steps.setup.outputs.project_type == 'static'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          working-directory: ./

      # OPCI√ìN 3: Deploy a Netlify (alternativa para est√°ticos)
      - name: Deploy to Netlify
        if: false  # Cambia a true si quieres usar Netlify en lugar de las otras opciones
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './public'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      # OPCI√ìN 4: Deploy a Railway - VERSI√ìN CORREGIDA
      - name: Deploy to Railway
        if: steps.setup.outputs.project_type == 'flask' || steps.setup.outputs.project_type == 'python'
        uses: bervProject/railway-deploy@v0.1.2
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: ${{ secrets.RAILWAY_SERVICE }}

      # OPCI√ìN 4 ALTERNATIVA: Deploy a Railway usando el m√©todo oficial
      - name: Deploy to Railway (M√©todo alternativo)
        if: false  # Cambia a true si la opci√≥n anterior sigue fallando
        run: |
          # Instalar Railway CLI
          npm install -g @railway/cli
          
          # Autenticar con Railway
          echo "${{ secrets.RAILWAY_TOKEN }}" | railway login
          
          # Deploy del proyecto
          railway up --service ${{ secrets.RAILWAY_SERVICE }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      # OPCI√ìN 5: Deploy a Render (alternativa moderna para Python)
      - name: Deploy to Render
        if: false  # Cambia a true si quieres usar Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

      - name: Deploy Success Notification
        run: |
          echo "‚úÖ Deploy completado exitosamente!"
          echo "üöÄ Proyecto tipo: ${{ steps.setup.outputs.project_type }}"
          echo "üìÖ Fecha: $(date)"
          echo "üåê Tu aplicaci√≥n deber√≠a estar disponible en l√≠nea"
